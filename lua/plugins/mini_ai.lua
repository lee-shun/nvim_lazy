return {
    "echasnovski/mini.ai",
    event = "VeryLazy",
    dependencies = {
        {
            "nvim-treesitter/nvim-treesitter-textobjects",
            init = function()
                -- no need to load the plugin, since we only need its queries
                require("lazy.core.loader").disable_rtp_plugin("nvim-treesitter-textobjects")
            end,
        },
    },
    opts = function()
        local ai = require("mini.ai")
        return {
            n_lines = 500,
            custom_textobjects = {
                o = ai.gen_spec.treesitter({
                    a = { "@block.outer", "@conditional.outer", "@loop.outer" },
                    i = { "@block.inner", "@conditional.inner", "@loop.inner" },
                }, {}),
                f = ai.gen_spec.treesitter({ a = "@function.outer", i = "@function.inner" }, {}),
                c = ai.gen_spec.treesitter({ a = "@class.outer", i = "@class.inner" }, {}),
            },
        }
    end,
    config = function(_, opts)
        require("mini.ai").setup(opts)
        -- register all text objects with which-key
        require("which-key").add({
            mode = { "o", "x" },
            { "a ",  desc = "Whitespace" },
            { 'a"',  desc = 'Balanced "' },
            { "a'",  desc = "Balanced '" },
            { "a(",  desc = "Balanced (" },
            { "a)",  desc = "Balanced )" },
            { "a,",  desc = "Balanced ," },
            { "a.",  desc = "Balanced ." },
            { "a:",  desc = "Balanced :" },
            { "a;",  desc = "Balanced ;" },
            { "a<",  desc = "Balanced <" },
            { "a>",  desc = "Balanced >" },
            { "a?",  desc = "User Prompt" },
            { "a[",  desc = "Balanced [" },
            { "a]",  desc = "Balanced ]" },
            { "a`",  desc = "Balanced `" },
            { "aa",  desc = "Argument" },
            { "ab",  desc = "Balanced ), ], }" },
            { "ac",  desc = "Class" },
            { "af",  desc = "Function" },
            { "al",  group = "Around Last textobject" },
            { "al ", desc = "Whitespace" },
            { 'al"', desc = 'Balanced "' },
            { "al'", desc = "Balanced '" },
            { "al(", desc = "Balanced (" },
            { "al)", desc = "Balanced )" },
            { "al,", desc = "Balanced ," },
            { "al.", desc = "Balanced ." },
            { "al:", desc = "Balanced :" },
            { "al;", desc = "Balanced ;" },
            { "al<", desc = "Balanced <" },
            { "al>", desc = "Balanced >" },
            { "al?", desc = "User Prompt" },
            { "al[", desc = "Balanced [" },
            { "al]", desc = "Balanced ]" },
            { "al`", desc = "Balanced `" },
            { "ala", desc = "Argument" },
            { "alb", desc = "Balanced ), ], }" },
            { "alc", desc = "Class" },
            { "alf", desc = "Function" },
            { "alo", desc = "Block, conditional, loop" },
            { "alq", desc = "Quote `, \", '" },
            { "alt", desc = "Tag" },
            { "al{", desc = "Balanced {" },
            { "al}", desc = "Balanced }" },
            { "an",  group = "Around Next textobject" },
            { "an ", desc = "Whitespace" },
            { 'an"', desc = 'Balanced "' },
            { "an'", desc = "Balanced '" },
            { "an(", desc = "Balanced (" },
            { "an)", desc = "Balanced )" },
            { "an,", desc = "Balanced ," },
            { "an.", desc = "Balanced ." },
            { "an:", desc = "Balanced :" },
            { "an;", desc = "Balanced ;" },
            { "an<", desc = "Balanced <" },
            { "an>", desc = "Balanced >" },
            { "an?", desc = "User Prompt" },
            { "an[", desc = "Balanced [" },
            { "an]", desc = "Balanced ]" },
            { "an`", desc = "Balanced `" },
            { "ana", desc = "Argument" },
            { "anb", desc = "Balanced ), ], }" },
            { "anc", desc = "Class" },
            { "anf", desc = "Function" },
            { "ano", desc = "Block, conditional, loop" },
            { "anq", desc = "Quote `, \", '" },
            { "ant", desc = "Tag" },
            { "an{", desc = "Balanced {" },
            { "an}", desc = "Balanced }" },
            { "ao",  desc = "Block, conditional, loop" },
            { "aq",  desc = "Quote `, \", '" },
            { "at",  desc = "Tag" },
            { "a{",  desc = "Balanced {" },
            { "a}",  desc = "Balanced }" },
            { "i ",  desc = "Whitespace" },
            { 'i"',  desc = 'Balanced "' },
            { "i'",  desc = "Balanced '" },
            { "i(",  desc = "Balanced (" },
            { "i)",  desc = "Balanced ) including white-space" },
            { "i,",  desc = "Balanced ," },
            { "i.",  desc = "Balanced ." },
            { "i:",  desc = "Balanced :" },
            { "i;",  desc = "Balanced ;" },
            { "i<",  desc = "Balanced <" },
            { "i>",  desc = "Balanced > including white-space" },
            { "i?",  desc = "User Prompt" },
            { "i[",  desc = "Balanced [" },
            { "i]",  desc = "Balanced ] including white-space" },
            { "i`",  desc = "Balanced `" },
            { "ia",  desc = "Argument" },
            { "ib",  desc = "Balanced ), ], }" },
            { "ic",  desc = "Class" },
            { "if",  desc = "Function" },
            { "il",  group = "Inside Last textobject" },
            { "il ", desc = "Whitespace" },
            { 'il"', desc = 'Balanced "' },
            { "il'", desc = "Balanced '" },
            { "il(", desc = "Balanced (" },
            { "il)", desc = "Balanced ) including white-space" },
            { "il,", desc = "Balanced ," },
            { "il.", desc = "Balanced ." },
            { "il:", desc = "Balanced :" },
            { "il;", desc = "Balanced ;" },
            { "il<", desc = "Balanced <" },
            { "il>", desc = "Balanced > including white-space" },
            { "il?", desc = "User Prompt" },
            { "il[", desc = "Balanced [" },
            { "il]", desc = "Balanced ] including white-space" },
            { "il`", desc = "Balanced `" },
            { "ila", desc = "Argument" },
            { "ilb", desc = "Balanced ), ], }" },
            { "ilc", desc = "Class" },
            { "ilf", desc = "Function" },
            { "ilo", desc = "Block, conditional, loop" },
            { "ilq", desc = "Quote `, \", '" },
            { "ilt", desc = "Tag" },
            { "il{", desc = "Balanced {" },
            { "il}", desc = "Balanced } including white-space" },
            { "in",  group = "Inside Next textobject" },
            { "in ", desc = "Whitespace" },
            { 'in"', desc = 'Balanced "' },
            { "in'", desc = "Balanced '" },
            { "in(", desc = "Balanced (" },
            { "in)", desc = "Balanced ) including white-space" },
            { "in,", desc = "Balanced ," },
            { "in.", desc = "Balanced ." },
            { "in:", desc = "Balanced :" },
            { "in;", desc = "Balanced ;" },
            { "in<", desc = "Balanced <" },
            { "in>", desc = "Balanced > including white-space" },
            { "in?", desc = "User Prompt" },
            { "in[", desc = "Balanced [" },
            { "in]", desc = "Balanced ] including white-space" },
            { "in`", desc = "Balanced `" },
            { "ina", desc = "Argument" },
            { "inb", desc = "Balanced ), ], }" },
            { "inc", desc = "Class" },
            { "inf", desc = "Function" },
            { "ino", desc = "Block, conditional, loop" },
            { "inq", desc = "Quote `, \", '" },
            { "int", desc = "Tag" },
            { "in{", desc = "Balanced {" },
            { "in}", desc = "Balanced } including white-space" },
            { "io",  desc = "Block, conditional, loop" },
            { "iq",  desc = "Quote `, \", '" },
            { "it",  desc = "Tag" },
            { "i{",  desc = "Balanced {" },
            { "i}",  desc = "Balanced } including white-space" },
        })
    end,
}
